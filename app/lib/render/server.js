// React Hot Boilerplate (replace this copyright notice with your own)
// (C) 2015, Michiel Sikma <michiel@sikma.org>
// MIT License

import React from 'react';
import Router from 'react-router';
import express from 'express';
import http from 'http';
import clc from 'cli-color';

import { getReqInfo, getServerInfo } from 'render/helpers/log-info';
import wrapOutput from 'render/helpers/wrap';
import routes from '../routes';

/**
 * This script is used to serve rendered HTML pages to the user.
 *
 * We serve the HTML and then activate React on the prerendered page,
 * allowing for very quick initialization times. We also fetch all data
 * that the page would normally request by XHR and inject it on load.
 *
 * Since React only covers the content inside the <body> tag, rendered HTML
 * is injected into a Jade template to finalize it.
 * The templates can be found in 'app/assets/templates/'.
 *
 * This server does not serve any static assets and is not supposed to.
 * Static assets should be served without hitting Node; only dynamic HTML
 * pages generated by React should go through this code.
 *
 * @param {Number} port Port on which the server will listen
 * @param {Boolean} noCaching Whether to avoid using or creating cache
 * @param {Object} packageData Main package information
 * @param {String} version Version number of the current code
 */
function listen(port, noCaching, packageData, version) {
  // Print several informational statements about the software and platform.
  console.log(getServerInfo(version));

  const app = express();

  app.set('port', port);
  app.set('x-powered-by', false);
  app.use((req, res) => {
    // Run the requested URL through the router and handle the request.
    Router.run(routes, req.path, (Handler, state) => {
      // Print basic information on the request to stdout.
      console.log(getReqInfo(req, state));

      // Status code the server replies with.
      const code = state.routes.length > 0 ? 200 : 404;

      // Generate the route's rendered HTML output and wrap it in the template.
      const output = wrapOutput({
        data: JSON.stringify({'a': 'b'}),
        html: React.renderToString(<Handler />),
        responseCode: code
      }, code == 200 ? 'standard' : 'error');

      // Respond with the intended status and the HTML content.
      res.status(code).send(output);
    });
  });

  // Fire up the server.
  const httpServer = http.createServer(app).listen(port, 'localhost', () => {
    console.log(clc.blue('Listening on port ' + port + ' (^C to quit)'));
  });

  // Ensure a graceful shutdown.
  process.on('SIGINT', () => {
    console.log('\nClosing server.');
    httpServer.close();
    process.exit(0);
  });
}

export default listen;
